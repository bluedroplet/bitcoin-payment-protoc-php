<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: paymentrequest.proto 
//   Date: 2014-03-27 19:59:43 


namespace payments {

         
    class Output extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.Output');

             
            // optional uint64 amount = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "amount";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;
            
             
            $f->default = 0;

            $descriptor->addField($f);
             
            // required bytes script = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "script";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "amount" has a value
         *
         * @return boolean
         */
        public function hasAmount()
        {
            return isset($this->amount);
        }

        /**
         * Clear "amount" value
         */
        public function clearAmount()
        {
            unset($this->amount);
        }

        
        /**
         * Get "amount" value
         *
         * @return int 
         */
        public function getAmount()
        {
            return $this->amount;
        }

        /**
         * Set "amount" value
         *
         * @param int $value
         */
        public function setAmount($value)
        {
            return $this->amount = $value;
        }

        
                
        /**
         * Check if "script" has a value
         *
         * @return boolean
         */
        public function hasScript()
        {
            return isset($this->script);
        }

        /**
         * Clear "script" value
         */
        public function clearScript()
        {
            unset($this->script);
        }

        
        /**
         * Get "script" value
         *
         * @return string 
         */
        public function getScript()
        {
            return $this->script;
        }

        /**
         * Set "script" value
         *
         * @param string $value
         */
        public function setScript($value)
        {
            return $this->script = $value;
        }
    }
}


namespace payments {

         
    class PaymentDetails extends \DrSlump\Protobuf\Message {
                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.PaymentDetails');

             
            // optional string network = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "network";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;
            
             
            $f->default = 'main';

            $descriptor->addField($f);
             
            // repeated message outputs = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "outputs";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\payments\Output';

            $descriptor->addField($f);
             
            // required uint64 time = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "time";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional uint64 expires = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "expires";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional string memo = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "memo";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string payment_url = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "payment_url";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional bytes merchant_data = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "merchant_data";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "network" has a value
         *
         * @return boolean
         */
        public function hasNetwork()
        {
            return isset($this->network);
        }

        /**
         * Clear "network" value
         */
        public function clearNetwork()
        {
            unset($this->network);
        }

        
        /**
         * Get "network" value
         *
         * @return string 
         */
        public function getNetwork()
        {
            return $this->network;
        }

        /**
         * Set "network" value
         *
         * @param string $value
         */
        public function setNetwork($value)
        {
            return $this->network = $value;
        }

        
                
        /**
         * Check if "outputs" has a value
         *
         * @return boolean
         */
        public function hasOutputs()
        {
            return isset($this->outputs);
        }

        /**
         * Clear "outputs" value
         */
        public function clearOutputs()
        {
            unset($this->outputs);
        }

        
        /**
         * Get "outputs" value
         *
         * @return payments\Output[]
         */
        public function getOutputs($idx = null)
        {
            if (NULL !== $idx) {
                return $this->outputs[$idx];
            }

            return $this->outputs;
        }

        /**
         * Get "outputs" list of values
         *
         * @return payments\Output[]
         */
        public function getOutputsList()
        {
            return $this->getOutputs();
        }

        /**
         * Set "outputs" value
         *
         * @param payments\Output[] $value
         */
        public function setOutputs($value)
        {
            return $this->outputs = $value;
        }

        /**
         * Add a new element to "outputs"
         *
         * @param payments\Output $value
         */
        public function addOutputs($value)
        {
            $this->outputs[] = $value;
        }

        
                
        /**
         * Check if "time" has a value
         *
         * @return boolean
         */
        public function hasTime()
        {
            return isset($this->time);
        }

        /**
         * Clear "time" value
         */
        public function clearTime()
        {
            unset($this->time);
        }

        
        /**
         * Get "time" value
         *
         * @return int 
         */
        public function getTime()
        {
            return $this->time;
        }

        /**
         * Set "time" value
         *
         * @param int $value
         */
        public function setTime($value)
        {
            return $this->time = $value;
        }

        
                
        /**
         * Check if "expires" has a value
         *
         * @return boolean
         */
        public function hasExpires()
        {
            return isset($this->expires);
        }

        /**
         * Clear "expires" value
         */
        public function clearExpires()
        {
            unset($this->expires);
        }

        
        /**
         * Get "expires" value
         *
         * @return int 
         */
        public function getExpires()
        {
            return $this->expires;
        }

        /**
         * Set "expires" value
         *
         * @param int $value
         */
        public function setExpires($value)
        {
            return $this->expires = $value;
        }

        
                
        /**
         * Check if "memo" has a value
         *
         * @return boolean
         */
        public function hasMemo()
        {
            return isset($this->memo);
        }

        /**
         * Clear "memo" value
         */
        public function clearMemo()
        {
            unset($this->memo);
        }

        
        /**
         * Get "memo" value
         *
         * @return string 
         */
        public function getMemo()
        {
            return $this->memo;
        }

        /**
         * Set "memo" value
         *
         * @param string $value
         */
        public function setMemo($value)
        {
            return $this->memo = $value;
        }

        
                
        /**
         * Check if "payment_url" has a value
         *
         * @return boolean
         */
        public function hasPaymentUrl()
        {
            return isset($this->payment_url);
        }

        /**
         * Clear "payment_url" value
         */
        public function clearPaymentUrl()
        {
            unset($this->payment_url);
        }

        
        /**
         * Get "payment_url" value
         *
         * @return string 
         */
        public function getPaymentUrl()
        {
            return $this->payment_url;
        }

        /**
         * Set "payment_url" value
         *
         * @param string $value
         */
        public function setPaymentUrl($value)
        {
            return $this->payment_url = $value;
        }

        
                
        /**
         * Check if "merchant_data" has a value
         *
         * @return boolean
         */
        public function hasMerchantData()
        {
            return isset($this->merchant_data);
        }

        /**
         * Clear "merchant_data" value
         */
        public function clearMerchantData()
        {
            unset($this->merchant_data);
        }

        
        /**
         * Get "merchant_data" value
         *
         * @return string 
         */
        public function getMerchantData()
        {
            return $this->merchant_data;
        }

        /**
         * Set "merchant_data" value
         *
         * @param string $value
         */
        public function setMerchantData($value)
        {
            return $this->merchant_data = $value;
        }
    }
}


namespace payments {

         
    class PaymentRequest extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.PaymentRequest');

             
            // optional uint32 payment_details_version = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "payment_details_version";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;
            
             
            $f->default = 1;

            $descriptor->addField($f);
             
            // optional string pki_type = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "pki_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;
            
             
            $f->default = 'none';

            $descriptor->addField($f);
             
            // optional bytes pki_data = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "pki_data";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // required bytes serialized_payment_details = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "serialized_payment_details";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // optional bytes signature = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "signature";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "payment_details_version" has a value
         *
         * @return boolean
         */
        public function hasPaymentDetailsVersion()
        {
            return isset($this->payment_details_version);
        }

        /**
         * Clear "payment_details_version" value
         */
        public function clearPaymentDetailsVersion()
        {
            unset($this->payment_details_version);
        }

        
        /**
         * Get "payment_details_version" value
         *
         * @return int 
         */
        public function getPaymentDetailsVersion()
        {
            return $this->payment_details_version;
        }

        /**
         * Set "payment_details_version" value
         *
         * @param int $value
         */
        public function setPaymentDetailsVersion($value)
        {
            return $this->payment_details_version = $value;
        }

        
                
        /**
         * Check if "pki_type" has a value
         *
         * @return boolean
         */
        public function hasPkiType()
        {
            return isset($this->pki_type);
        }

        /**
         * Clear "pki_type" value
         */
        public function clearPkiType()
        {
            unset($this->pki_type);
        }

        
        /**
         * Get "pki_type" value
         *
         * @return string 
         */
        public function getPkiType()
        {
            return $this->pki_type;
        }

        /**
         * Set "pki_type" value
         *
         * @param string $value
         */
        public function setPkiType($value)
        {
            return $this->pki_type = $value;
        }

        
                
        /**
         * Check if "pki_data" has a value
         *
         * @return boolean
         */
        public function hasPkiData()
        {
            return isset($this->pki_data);
        }

        /**
         * Clear "pki_data" value
         */
        public function clearPkiData()
        {
            unset($this->pki_data);
        }

        
        /**
         * Get "pki_data" value
         *
         * @return string 
         */
        public function getPkiData()
        {
            return $this->pki_data;
        }

        /**
         * Set "pki_data" value
         *
         * @param string $value
         */
        public function setPkiData($value)
        {
            return $this->pki_data = $value;
        }

        
                
        /**
         * Check if "serialized_payment_details" has a value
         *
         * @return boolean
         */
        public function hasSerializedPaymentDetails()
        {
            return isset($this->serialized_payment_details);
        }

        /**
         * Clear "serialized_payment_details" value
         */
        public function clearSerializedPaymentDetails()
        {
            unset($this->serialized_payment_details);
        }

        
        /**
         * Get "serialized_payment_details" value
         *
         * @return string 
         */
        public function getSerializedPaymentDetails()
        {
            return $this->serialized_payment_details;
        }

        /**
         * Set "serialized_payment_details" value
         *
         * @param string $value
         */
        public function setSerializedPaymentDetails($value)
        {
            return $this->serialized_payment_details = $value;
        }

        
                
        /**
         * Check if "signature" has a value
         *
         * @return boolean
         */
        public function hasSignature()
        {
            return isset($this->signature);
        }

        /**
         * Clear "signature" value
         */
        public function clearSignature()
        {
            unset($this->signature);
        }

        
        /**
         * Get "signature" value
         *
         * @return string 
         */
        public function getSignature()
        {
            return $this->signature;
        }

        /**
         * Set "signature" value
         *
         * @param string $value
         */
        public function setSignature($value)
        {
            return $this->signature = $value;
        }
    }
}


namespace payments {

         
    class X509Certificates extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.X509Certificates');

             
            // repeated bytes certificate = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "certificate";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "certificate" has a value
         *
         * @return boolean
         */
        public function hasCertificate()
        {
            return isset($this->certificate);
        }

        /**
         * Clear "certificate" value
         */
        public function clearCertificate()
        {
            unset($this->certificate);
        }

        
        /**
         * Get "certificate" value
         *
         * @return string[]
         */
        public function getCertificate($idx = null)
        {
            if (NULL !== $idx) {
                return $this->certificate[$idx];
            }

            return $this->certificate;
        }

        /**
         * Get "certificate" list of values
         *
         * @return string[]
         */
        public function getCertificateList()
        {
            return $this->getCertificate();
        }

        /**
         * Set "certificate" value
         *
         * @param string[] $value
         */
        public function setCertificate($value)
        {
            return $this->certificate = $value;
        }

        /**
         * Add a new element to "certificate"
         *
         * @param string $value
         */
        public function addCertificate($value)
        {
            $this->certificate[] = $value;
        }
    }
}


namespace payments {

         
    class Payment extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.Payment');

             
            // optional bytes merchant_data = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "merchant_data";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // repeated bytes transactions = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "transactions";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // repeated message refund_to = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "refund_to";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\payments\Output';

            $descriptor->addField($f);
             
            // optional string memo = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "memo";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "merchant_data" has a value
         *
         * @return boolean
         */
        public function hasMerchantData()
        {
            return isset($this->merchant_data);
        }

        /**
         * Clear "merchant_data" value
         */
        public function clearMerchantData()
        {
            unset($this->merchant_data);
        }

        
        /**
         * Get "merchant_data" value
         *
         * @return string 
         */
        public function getMerchantData()
        {
            return $this->merchant_data;
        }

        /**
         * Set "merchant_data" value
         *
         * @param string $value
         */
        public function setMerchantData($value)
        {
            return $this->merchant_data = $value;
        }

        
                
        /**
         * Check if "transactions" has a value
         *
         * @return boolean
         */
        public function hasTransactions()
        {
            return isset($this->transactions);
        }

        /**
         * Clear "transactions" value
         */
        public function clearTransactions()
        {
            unset($this->transactions);
        }

        
        /**
         * Get "transactions" value
         *
         * @return string[]
         */
        public function getTransactions($idx = null)
        {
            if (NULL !== $idx) {
                return $this->transactions[$idx];
            }

            return $this->transactions;
        }

        /**
         * Get "transactions" list of values
         *
         * @return string[]
         */
        public function getTransactionsList()
        {
            return $this->getTransactions();
        }

        /**
         * Set "transactions" value
         *
         * @param string[] $value
         */
        public function setTransactions($value)
        {
            return $this->transactions = $value;
        }

        /**
         * Add a new element to "transactions"
         *
         * @param string $value
         */
        public function addTransactions($value)
        {
            $this->transactions[] = $value;
        }

        
                
        /**
         * Check if "refund_to" has a value
         *
         * @return boolean
         */
        public function hasRefundTo()
        {
            return isset($this->refund_to);
        }

        /**
         * Clear "refund_to" value
         */
        public function clearRefundTo()
        {
            unset($this->refund_to);
        }

        
        /**
         * Get "refund_to" value
         *
         * @return payments\Output[]
         */
        public function getRefundTo($idx = null)
        {
            if (NULL !== $idx) {
                return $this->refund_to[$idx];
            }

            return $this->refund_to;
        }

        /**
         * Get "refund_to" list of values
         *
         * @return payments\Output[]
         */
        public function getRefundToList()
        {
            return $this->getRefundTo();
        }

        /**
         * Set "refund_to" value
         *
         * @param payments\Output[] $value
         */
        public function setRefundTo($value)
        {
            return $this->refund_to = $value;
        }

        /**
         * Add a new element to "refund_to"
         *
         * @param payments\Output $value
         */
        public function addRefundTo($value)
        {
            $this->refund_to[] = $value;
        }

        
                
        /**
         * Check if "memo" has a value
         *
         * @return boolean
         */
        public function hasMemo()
        {
            return isset($this->memo);
        }

        /**
         * Clear "memo" value
         */
        public function clearMemo()
        {
            unset($this->memo);
        }

        
        /**
         * Get "memo" value
         *
         * @return string 
         */
        public function getMemo()
        {
            return $this->memo;
        }

        /**
         * Set "memo" value
         *
         * @param string $value
         */
        public function setMemo($value)
        {
            return $this->memo = $value;
        }
    }
}


namespace payments {

         
    class PaymentACK extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'payments.PaymentACK');

             
            // required message payment = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "payment";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\payments\Payment';

            $descriptor->addField($f);
             
            // optional string memo = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "memo";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "payment" has a value
         *
         * @return boolean
         */
        public function hasPayment()
        {
            return isset($this->payment);
        }

        /**
         * Clear "payment" value
         */
        public function clearPayment()
        {
            unset($this->payment);
        }

        
        /**
         * Get "payment" value
         *
         * @return payments\Payment 
         */
        public function getPayment()
        {
            return $this->payment;
        }

        /**
         * Set "payment" value
         *
         * @param payments\Payment $value
         */
        public function setPayment($value)
        {
            return $this->payment = $value;
        }

        
                
        /**
         * Check if "memo" has a value
         *
         * @return boolean
         */
        public function hasMemo()
        {
            return isset($this->memo);
        }

        /**
         * Clear "memo" value
         */
        public function clearMemo()
        {
            unset($this->memo);
        }

        
        /**
         * Get "memo" value
         *
         * @return string 
         */
        public function getMemo()
        {
            return $this->memo;
        }

        /**
         * Set "memo" value
         *
         * @param string $value
         */
        public function setMemo($value)
        {
            return $this->memo = $value;
        }
    }
}


